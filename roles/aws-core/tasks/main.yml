##########
- name:                      Create Auto Scaling Group
  ec2_asg:
    name:                    "{{ asg_name }}"
    region:                  "{{ aws_region }}"
    aws_access_key:          "{{ aws_access_key }}"
    aws_secret_key:          "{{ aws_secret_key }}"
    availability_zones:      [ "{{ aws_region }}a","{{ aws_region }}b" ]
    launch_config_name:      "{{ lc_name }}"
    min_size:                "{{ asg_min }}"
    max_size:                "{{ asg_max }}"
    desired_capacity:        "{{ asg_desired }}"
    vpc_zone_identifier:     [ "{{ subnet_a_id}}","{{ subnet_b_id }}" ]
    target_group_arns:       "{{ elb_tg_arn }}" 
    tags:
      - type:                "webserver"
        propagate_at_launch: "yes" 
    wait_for_instances:      "yes"
    state:                   "present"

##########
- name:                      Create Application Load Balancer
  elb_application_lb:
    name:                    "{{ elb_name }}"
    region:                  "{{ aws_region }}"
    aws_access_key:          "{{ aws_access_key }}"
    aws_secret_key:          "{{ aws_secret_key }}"
    security_groups:
      -                      "{{ elb_secgrp_name }}"
    subnets:
      -                      "{{ subnet_a_id}}"
      -                      "{{ subnet_b_id}}"
    listeners:
      - Protocol:            "HTTP"
        Port:                "80"
        DefaultActions:
          - Type:            "forward"
            TargetGroupName: "{{ elb_tg_name }}"
    state:                   "present"
    wait:                    "yes"
  register: alb_results

- name:                      Set Load Balancer public DNS in variable
  set_fact:
    alb:                     "{{ alb.dns_name }}"

##########
- name:                      Get ASG instance facts
  ec2_instance_facts:
    aws_access_key:          "{{ aws_access_key }}"
    aws_secret_key:          "{{ aws_secret_key }}"
    region:                  "{{ aws_region }}"
    filters:
      "tag:type":            webserver
  register: instance_info

- name:                      Add hosts to inventory
  add_host:                  hostname={{ item }} groups=webservers
  with_items:                "{{ instance_info.instances|map(attribute='public_dns_name')|list }}"

